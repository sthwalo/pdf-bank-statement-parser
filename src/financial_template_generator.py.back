import pandas as pd
import logging
from pathlib import Path
from datetime import datetime
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.utils import get_column_letter

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FinancialTemplateGenerator:
    def __init__(self):
        """Initialize with complete account mappings matching all trial balance accounts."""
        self.account_mappings = {
            # INCOME ACCOUNTS (4000-4999)
            'Income from Services': '4000',
            'Inter Account Transfers': '4100',
            
            # EXPENSE ACCOUNTS (5000-5999)
            'Bank Charges': '5000',
            'Bond Payment': '5010',
            'Business Equipment': '5020',
            'Business Meetings': '5030',
            'Cosmetics Expense': '5040',
            'Director Remunerations': '5050',
            'Donations': '5060',
            'Educational Expenses': '5070',
            'Electricity': '5080',
            'Entertainment': '5090',
            'Fuel Expense': '5100',
            'Household Expense': '5110',
            'Insurance': '5120',
            'Interest Paid': '5130',
            'Internet Expense': '5140',
            'Investment Expense': '5150',
            'Outsourced Services': '5160',
            'Salaries and Wages': '5170',
            'Stationery and Printing': '5180',
            'Supplier Payments': '5190',
            'Telephone Expense': '5200',
            'Toll Fees': '5210',
            'Travelling Expense': '5220',
            'Vehicle Hire': '5230',
            'Vehicle Maintenance': '5240',
            'Miscellaneous': '5250',
            
            # ASSET ACCOUNTS (1000-1999)
            'Assets': '1000',
            'Drawings': '1100',
            
            # LIABILITY ACCOUNTS (2000-2999)
            'Liabilities': '2000',
            
            # EQUITY ACCOUNTS (3000-3999)
            'Equity': '3000',
            'Retained Earnings': '3100'
        }
        
        self.account_types = {
            # Income
            'Income from Services': 'Income',
            'Inter Account Transfers': 'Income',
            
            # Expenses
            'Bank Charges': 'Expense',
            'Bond Payment': 'Expense',
            'Business Equipment': 'Expense',
            'Business Meetings': 'Expense',
            'Cosmetics Expense': 'Expense',
            'Director Remunerations': 'Expense',
            'Donations': 'Expense',
            'Educational Expenses': 'Expense',
            'Electricity': 'Expense',
            'Entertainment': 'Expense',
            'Fuel Expense': 'Expense',
            'Household Expense': 'Expense',
            'Insurance': 'Expense',
            'Interest Paid': 'Expense',
            'Internet Expense': 'Expense',
            'Investment Expense': 'Expense',
            'Outsourced Services': 'Expense',
            'Salaries and Wages': 'Expense',
            'Stationery and Printing': 'Expense',
            'Supplier Payments': 'Expense',
            'Telephone Expense': 'Expense',
            'Toll Fees': 'Expense',
            'Travelling Expense': 'Expense',
            'Vehicle Hire': 'Expense',
            'Vehicle Maintenance': 'Expense',
            'Miscellaneous': 'Expense',
            
            # Assets
            'Assets': 'Asset',
            'Drawings': 'Asset',
            
            # Liabilities
            'Liabilities': 'Liability',
            
            # Equity
            'Equity': 'Equity',
            'Retained Earnings': 'Equity',
            
            # Uncategorized
            'Uncategorized': 'Uncategorized'
        }

    def _preprocess_transactions(self, df):
        """Add account codes to transaction data."""
        # Create account code column
        df['Account Code'] = df['Account'].map(self.account_mappings)
        
        # Calculate balance for each account
        df['Balance'] = df['Credit'] - df['Debit']
        
        return df

    def _generate_income_statement(self, df):
        """Generate income statement from transaction data."""
        income_stmt = []
        
        # Revenue section
        income_stmt.append({'Category': 'REVENUE', 'Amount': None})
        revenue_codes = ['4000', '4100']
        total_revenue = df[df['Account Code'].isin(revenue_codes)]['Balance'].sum()
        
        for account in df[df['Account Code'].isin(revenue_codes)]['Account'].unique():
            amount = df[df['Account'] == account]['Balance'].sum()
            income_stmt.append({'Category': account, 'Amount': amount})
        
        income_stmt.append({'Category': 'Total Revenue', 'Amount': total_revenue})
        
        # Expenses section
        income_stmt.append({'Category': 'EXPENSES', 'Amount': None})
        expense_codes = [code for code in self.account_mappings.values() if code.startswith('5')]
        
        total_expenses = 0
        for account in df[df['Account Code'].isin(expense_codes)]['Account'].unique():
            amount = df[df['Account'] == account]['Balance'].sum()
            total_expenses += amount
            income_stmt.append({'Category': account, 'Amount': amount})
        
        income_stmt.append({'Category': 'Total Expenses', 'Amount': total_expenses})
        
        # Net Income
        net_income = total_revenue + total_expenses
        income_stmt.append({'Category': 'NET INCOME', 'Amount': net_income})
        
        return pd.DataFrame(income_stmt)

    def _apply_excel_formatting(self, writer):
        """Apply formatting to Excel worksheets."""
        for sheet_name in writer.sheets:
            ws = writer.sheets[sheet_name]
            
            # Format headers
            header_font = Font(bold=True, size=12)
            header_fill = PatternFill(start_color='E6E6E6', end_color='E6E6E6', fill_type='solid')
            
            for cell in ws[1]:
                cell.font = header_font
                cell.fill = header_fill
            
            # Format amounts
            for row in ws.iter_rows(min_row=2):
                for cell in row:
                    if isinstance(cell.value, (int, float)):
                        cell.number_format = 'R #,##0.00;[Red]-R #,##0.00'
            
            # Adjust column widths
            for column in ws.columns:
                max_length = 0
                for cell in column:
                    try:
                        max_length = max(max_length, len(str(cell.value)))
                    except:
                        pass
                ws.column_dimensions[get_column_letter(column[0].column)].width = max_length + 4

    def generate_financial_statements(self, input_path, output_path):
        """Generate financial statements from transaction data."""
        try:
            # Read transaction data
            df = pd.read_excel(input_path, sheet_name='Detailed Transactions')
            
            # Preprocess data
            df = self._preprocess_transactions(df)
            
            # Generate statements
            statements = {
                'Income Statement': self._generate_income_statement(df)
            }
            
            # Save to Excel
            with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
                for sheet_name, data in statements.items():
                    data.to_excel(writer, sheet_name=sheet_name, index=False)
                self._apply_excel_formatting(writer)
                
            logger.info(f"Financial statements generated successfully: {output_path}")
            
        except Exception as e:
            logger.error(f"Failed to generate financial statements: {str(e)}")
            raise

def main():
    input_path = Path('/Users/sthwalonyoni/pdf-bank-statement-parser/data/input/Annual_Cashbook_FY2024-2025.xlsx')
    output_path = input_path.parent / 'Financial_Statements.xlsx'
    
    generator = FinancialTemplateGenerator()
    generator.generate_financial_statements(str(input_path), str(output_path))

if __name__ == '__main__':
    main()